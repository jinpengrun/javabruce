在打印hello world 前 打印 时间
java org.objectweb.asm.util.ASMifier net oseye.demoasm.HelloWorld
查看 生成结构对比


动态生成java类的原因
 动态生成java类与aop密切相关的，aop设计初衷是 存在一类代码 松散又耦合
 比如包括 Bank、Customer、Account、Invoice 等对象，现在要加入一个安全检查模块， 对已有类的所有操作之前都必须进行一次安全检查。

然而 Bank、Customer、Account、Invoice 是代表不同的事务，派生自不同的父类，很难在高层上加入关于 Security Checker 的共有功能。对于没有多继承的 Java 来说，更是如此。传统的解决方案是使用 Decorator 模式，它可以在一定程度上改善耦合，而功能仍旧是分散的 —— 每个需要 Security Checker 的类都必须要派生一个 Decorator，每个需要 Security Checker 的方法都要被包装（wrap）。下面我们以 Account类为例看一下 Decorator

1 先来看看 Decorator模式  装饰器模式封装
    定义接口
        装饰器模式 封装
2 采用 代理模式  proxy
    proxy是面向接口的，所有proxy对象都必须定义一个接口，对象的代码也必须是对接口编程的，proxy生成的对象是接口一致，而不是对象一致的，
    例子中proxy.newProxyInstance生成的是实现account接口对象而不是accountImpl的子类。

    proxy通过反射实现，效率上有瓶颈，调用反射比一般的函数开销大10倍，

    asm改造既有类直接生成需要的代码，增强代码硬编码在新生成的类文件内部的，没有反射性能付出
    不需要为增强代码而新定义一个接口，生成代码可以覆盖原来的类，或者是原始类的子类。是一个普通java类
    而不是一个proxy类，甚至可以在应用程序的类框架中拥有自己的位置，派生自己的子类

    asm更小更快，







