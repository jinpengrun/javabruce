JDK中提供的生成动态代理类的机制有个鲜明的特点是： 某个类必须有实现的接口，而生成的代理类也只能代理某个类接口定义的方法，
   比如：如果上面例子的BMWCar实现了继承自两个接口的方法外，另外实现了方法bee() ,则在产生的动态代理类中不会有这个方法了！
   更极端的情况是：如果某个类没有实现接口，那么这个类就不能同JDK产生动态代理了！



幸好我们有 cglib cglib是一个高性能，强大的，高质量的生成类库，可以在运行期间扩展java类与java接口

cglib 创建某个类A的动态代理类的模式是：
1.   查找A上的所有非final 的public类型的方法定义；
2.   将这些方法的定义转换成字节码； 方法定义转为字节码
3.   将组成的字节码转换成相应的代理的class对象； 转换成相应的 代理的class对象
4.   实现 MethodInterceptor接口，用来处理 对代理类上所有方法的请求
      （这个接口和JDK动态代理InvocationHandler的功能和角色是一样的）


Fastclass 机制分析
jdk动态代理拦截对象是通过反射机制来调用被拦截方法的，反射的效率比较低，所以cglib采用了fastcalss机制
来实现对被拦截方法的调用。fastclass机制就是对一个类的方法建立索引，通过索引来直接调用相应的方法
下面一个小例子来实现说明一下 比较直观。






