1 使类和成员的访问性最小化
    尽可能降低可访问性。防止把任何散乱的类，接口和成员编程api一部分。除了公有静态final 外，公有类不应该包含共有域，
    并且要保证共有静态final域所引用对象都是不可变的。
2 在公有类中使用访问方法而非公有域
3 使可变性最小化
    使类成为不可变，遵循原则
    1 不要提供任何修改 类状态的方法
    2 保证类不被扩展
    3 使所有域都是final的
    4 使所有域都是私有的
    5 确保对于任何可变组件互斥访问
4 复合优先于继承
    使用继承前 问题
       1 父类 api有无缺陷， 有缺陷继承后会传播到子类
       2 使用 复合则可以设计新的api来隐藏缺陷
       3 只有当子类父类确实存在这种类型，如果子类父类不在同一包下并且并不是为了继承设计，会导致脆弱性，
         可以使用复合和转发机制代替继承
5 要么为继承设计，并提供文档说明，要么就禁止继承
    必须要说明可覆盖方法的自用性 self-use
    1 构造器绝不能调用可被覆盖的方法
6 接口优于抽象类
    骨架实现 称为 abstractInterface Collections Framework为每个重要集合接口 都提供了一个 骨架实现
    abstractCollection abstractSet
7 接口只用于定义类型
8 类层次youyu标签类
9 用函数对象表示策略
10 优先考虑静态成员类
