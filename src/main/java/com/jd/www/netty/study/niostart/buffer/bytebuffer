DirectByteBuffer 操作系统内存
HeapByteBuffer  java堆

directbytebuffer 内部使用了unsafe类对象
java不能直接访问操作系统底层，而是通过本地方法来访问，unsafe类提供了硬件级别的原子操作，功能
1 通过unsafe类可以分配内存，可以释放内存
  1 allocateMemory
  2 reallocateMemory
  3 freeMemory 分别用于分配内存，扩充内存和释放内存，与c语言中的3个方法对应
    public native long allocateMemory(long l);
    public native long reallocateMemory(long l, long l1);
    public native void freeMemory(long l);

2 可以定位对象某个字段的内存位置，也可以修改对象的字段值，即使它是私有的
    heapbytebuffer对象是直接操作堆中的字节数组对象的，而directbytebuffer对象是直接操作系统内存的



bytebuffer的四大类操作方法
1 字节数组指针操作
   position表示当前有效数据的指针位置，mark是position指针的标记作用，limit是数据有效性的一个上限范围，capacity是整个buffer的容量大小，
   他们的关系是mark<=position<=limit<=capacity;同时整个buffer中只有position-limit之间的数据是有效的，特别是在读写数据的时候，如果
   position大于limit，就会出现错误异常
   get方法获取一个字节：position++
   put方法存储一个字节：position++
   flip方法准备下一个状态：一般用于读完数据或者写完数据之后再次进行读写功能，position=0，mark=-1，limit=position
   rewind方法清零：一般用于写完数据之后，想起从起始位置开始读数据的情形，直接position=0
   clear方法从新初始化状态：一般用于清除操作，次方法功能就等于所有的状态都会回到初始的时候，position=0，mark=-1，limit=capacity
                         这个方法和flip有一个区别就是limit的值不一样
   reset方法设置position为标记mark值：position=mark
   mark方法设置mark为position值：mark=position其实这个方法和reset方法是一一对应，就是来回设置mark和position值
2 内存分配功能解析
3 子buffer操作
4 数据压缩和其他基本类型之间的转化
