各种开源系统所使用的设计模式
tomcat
jetty
1 jetty声明周期管理基于观察者模板设计，每个组件都会持有一个观察者(在这里是listener类，这个类通常对应到观察者设计模式中常用的observer角色)
网络io设计模式：mina，tomcat，jetty里设计模式


共有
1 简单工厂
2 工厂方法
3 单例模式 singleton
4 适配器 adapter
    spring aop 中，使用advice（通知） 来增强被代理类功能，spring 实现这一aop 功能 的原理就使用代理模式（1 jdk动态代理 2 cglib字节码生成技术代理）
    对类进行方法级别的切面增强，即生成被代理类的代理类，并在代理类的方法前，设置拦截器，通过执行拦截器中的内容增强了代理方法的功能，实现切面编程。
5 包装器 Decorator 或者 Wrapper
6 代理 proxy
7 观察者 observer  listener的实现
8 策略模式 strategy
    定义一系列算法，将其一个个封装起来，并且使他们可以相互替换。本模式使得算法可独立于使它的客户而变化
    策略模式是非算法的包装，把使用算法的责任和算法本身分隔开，委派给不同的对象管理。
    策略模式通常把一系列的算法包装到一系列的策略类里面，作为一个抽象策略类的子类

9 模板方法  template method
    定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。template method使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤
    一般需要继承，探讨另外一种 对模板方法的理解


